library(RMySQL)
library(dplyr)
library(tm)
library(stringdist)
library(stringi)
library(stringr)
library(data.table)
library(phonics)

#######FUNCTIONS####  
phonetics<- function(author){
  #Step1 - Strip accents from Authors
  authors_noaccent <- stri_trans_general(author,"Latin-ASCII")
  firstname <- gsub("([A-Za-z]+).*", "\\1", authors_noaccent)
  #Step2 - Soundex
  phonetic(firstname)   #Deal with -Abdekabel  Ab de kabel-
}

phon_nysiis<- function(author){
  #Step1 - Strip accents from Authors
  authors_noaccent <- stri_trans_general(author,"Latin-ASCII")
  firstname <- gsub("([A-Za-z]+).*", "\\1", authors_noaccent)
  #Step2 - Nysiis
  nysiis(firstname)   
}

#Notes: For authors we can use Levenshtein distance or Jairo Wirkler

Combinations = function(data){
  ids = combn(unique(data[,1]),2)
  df = data.frame(data[match(ids[1,], data[,1]), ], data[match(ids[2,], data[,1]), ])
  return(df)
}

year_distance<- function(data){
  abs(as.numeric(as.character(data$year)) - as.numeric(as.character(data$year.1)))
}

jaccard_distance<- function(data,var1,var2){
  x<-stringdist(data[,var1], data[,var2], method= "jaccard")
  x[which(x==Inf)] <- 1 
  as.numeric(x)
}

cosine_distance<- function(data,var1,var2){
  x<-stringdist(data[,var1], data[,var2], method= "cosine")
  x[which(x==Inf)] <- 1 
  as.numeric(x)
}
jarowinker_distance<- function(data,var1,var2){
  x<-stringdist(data[,var1], data[,var2], method= "jw")
  x[which(x==Inf)] <- 1 
  as.numeric(x)
}
#Jaccard distance from the first name initial of the authors
fname_initial_distance <- function(var1, var2){
  list1 <- strsplit(var1," ")
  list2 <- strsplit(var2, " ")
  t1 <- sapply(list1,function(x) x[2])
  t2 <- sapply(list2,function(x) x[2])
  stringdist(t1,t2, method = "jaccard")
}

#######FUNCTIONS#### 

#######################################################
#############Connect and Read from DB##################
drv<- dbDriver("MySQL")
pw<- {"dmkm1234"}
ucscDb <- dbConnect( MySQL(), dbname="dmkm_articles",
                     host= "127.0.0.1", port=8889,
                     user="root", password=pw 
) #3306
rm(pw)

signature<- dbReadTable(ucscDb, "authors_signature")
#############Connect and Read from DB##################
#######################################################



##############################################################
################  Disambiguated Authors   ####################
  #SET WORKING DICTIONARY

setwd("/Users/saulgarcia/Desktop/Github/WebOfScience1/R")
disambiguated = read.csv("articles_authors_disambiguated.csv", header=TRUE)

################  Disambiguated Authors   ####################
##############################################################

#JOIN
signature<- left_join(signature, disambiguated)

#Filter by Disambiguated  [[BLOCK TO PAIR UP]]
disam = signature %>% filter(!is.na(authorid)) #Normal Join would avoid this step
head(disam)

#####Create combinations
df = Combinations(disam) #866586 instances
df = df %>% filter(id!=id.1)
#######


##### Create Features #####
#Author Last Name Distance
df$dist_author = jarowinker_distance(df,"author","author.1")
#Author Initial's Distance
df$dist_initials = fname_initial_distance(df$author,df$author.1)
#Title Distance
df$dist_title = jaccard_distance(df, "title","title.1")
#Year
df$dist_year = year_distance(df)
#Coauthors Distance (jaccard)
df$dist_coauthor = jaccard_distance(df,"coauthors","coauthors.1")
#Keyword Distance   (cosine)
df$dist_keyword = cosine_distance(df,"keyword","keyword.1")
#Journal Distance
df$dist_journal = cosine_distance(df,"journal","journal.1")
#Institution Distance
df$dist_institution = cosine_distance(df,"institution","institution.1")
#Label
df$label = as.numeric(df$authorid==df$authorid.1)


#######################################################
###################### MODELS   #######################
library(caTools)
library(randomForest)
library(rpart)
library(rpart.plot)
library(e1071)
set.seed(123)

###################### Training and Testing Set ##################

#Build the training and testing by disambiguated authors
authors = as.data.frame(unique(disam$authorid))
names(authors)<-c("authorid")
k=10
authors$fold = sample(rep(1:k,length=nrow(authors)))
list = 1:k
trlist=subset(authors, fold %in% list[-1] )$authorid
telist=subset(authors, fold %in% 1 )$authorid
train = filter(df, authorid %in% trlist & authorid.1 %in% trlist )
test = filter(df, authorid %in% telist | authorid.1 %in% telist)
###################### Feature Selection ##################

# ensure results are repeatable
set.seed(7)
# load the library
library(mlbench)
library(caret)
# prepare training scheme
control <- trainControl(method="repeatedcv", number=10, repeats=3)
# train the model
model <- train(as.factor(label) ~ dist_author + dist_initials + dist_title + dist_year + dist_coauthor +
                 dist_keyword + dist_keyword + dist_journal,
               data=df, method="lvq", preProcess="scale", trControl=control)
# estimate variable importance
importance <- varImp(model, scale=FALSE)
# summarize importance
print(importance)
# plot importance
plot(importance)

###################### Cross Validation ##################
results <- data.frame()
for(i in 1:k){
  trlist=subset(authors, fold %in% list[-i] )$authorid
  telist=subset(authors, fold %in% i )$authorid
  train = filter(df, authorid %in% trlist & authorid.1 %in% trlist )
  test = filter(df, authorid %in% telist | authorid.1 %in% telist)
  #Forest
  AuthorForest = randomForest(as.factor(label) ~ dist_author + dist_initials + dist_title + dist_year + dist_coauthor +
                                dist_keyword + dist_keyword + dist_journal,
                              data=train, nodesize=25, ntree = 100)
  PredictForest = predict(AuthorForest , newdata = test)
  #Save results
  temp = cbind(test$label, PredictForest)
  results <- rbind(results, temp)
}
#Build Confusion Matrix and validate Accuracy
cm = table(results[,1], results[,2])
accuracy = sum(diag(cm))/sum(cm)


# results <- rbind(results, temp)
# cm=table(results[,1], results[,2])

###############################        RANDOM FOREST       ###################
AuthorForest = randomForest(as.factor(label) ~ dist_author + dist_initials + dist_title + dist_year + dist_coauthor +
                              dist_keyword + dist_keyword + dist_journal,
                              data=train, nodesize=25, ntree = 200)
PredictForest = predict(AuthorForest , newdata = test)
cm = table(test$label, PredictForest)
accuracy = (cm[1,1]+cm[2,2])/(cm[1,1]+cm[2,2]+cm[2,1]+cm[1,2])
accuracy  
error = sqrt((sum(test$label - PredictForest)^2)/nrow(test))

save(AuthorForest, file = "AuthorForest.rda")
#######################################      SVM     ######################################

AuthorSVM = svm(as.factor(label) ~ dist_author+ dist_initials + dist_title + dist_year + dist_coauthor +
                              dist_keyword + dist_keyword + dist_journal,
                            data=train)
PredictSVM = predict(AuthorSVM, newdata= test)
cm = table(test$label, PredictSVM)
accuracy = (cm[1,1]+cm[2,2])/(cm[1,1]+cm[2,2]+cm[2,1]+cm[1,2])
accuracy  # [1] 0.9952765  on test  or [1] 0.9585501 considering sub1  #[1] 0.9946418

save(AuthorSVM, file = "AuthorSVM.rda")

#################### RPART With CrosValidation
library(caret)
library(e1071)
set.seed(111)

numFolds = trainControl(method = "cv", number = 10) #cv for cross validation, and 10 folds
cpGrid = expand.grid(.cp = seq(0.01,0.5, 0.01))
train(as.factor(label) ~ dist_author + dist_initials + dist_title + dist_year + dist_coauthor +
        dist_keyword + dist_keyword + dist_journal,
      data=train, method="rpart" , trControl = numFolds, tuneGrid= cpGrid)

AuthorCART = rpart(label ~ dist_author + dist_initials + dist_title + dist_year + dist_coauthor +
                    dist_keyword + dist_keyword + dist_journal,
                    data=train,
                    method = "class",
                    minbucket = 25, cp=0.5)

PredictCART = predict(AuthorCART, newdata = test, type = "class") #This is like getting Threshold 0.5
cm = table(test$label, PredictCART)
accuracy = (cm[1,1]+cm[2,2])/(cm[1,1]+cm[2,2]+cm[2,1]+cm[1,2])
accuracy #[1] 0.9951842 test or [1] 0.9610056 in sub1

save(AuthorCART, file = "AuthorCART.rda")

############ CTREE
library(party)
AuthorCTree = ctree(as.factor(label) ~ dist_author + dist_initials + dist_title + dist_year + dist_coauthor +
                                       dist_keyword + dist_keyword + dist_journal,
                                     data=train)
PredictCTree = predict(AuthorCTree, newdata = test)
cm = table(test$label, PredictCTree)
accuracy = (cm[1,1]+cm[2,2])/(cm[1,1]+cm[2,2]+cm[2,1]+cm[1,2])
accuracy #     [1] 0.9959342 test or    [1] 0.9466238 on sub1

save(AuthorCTree, file = "AuthorCTree.rda")

############ GLM    ###  Not very good
AuthorGLM = glm(label ~ dist_author + dist_initials + dist_title + dist_year + dist_coauthor +
                      dist_keyword + dist_keyword + dist_journal,  family = binomial(logit),
                    data=train)
PredictGLM = predict(AuthorGLM, newdata = test, type='response')
fitted.results = ifelse(PredictGLM > 0.5,1,0)
cm = table(test$label, fitted.results)
accuracy = (cm[1,1]+cm[2,2])/(cm[1,1]+cm[2,2]+cm[2,1]+cm[1,2])
accuracy #   [1] 0.9946264 test           [1] 0.9311312 on sub1

save(AuthorGLM, file = "AuthorGLM.rda")

#error<-sqrt((sum((test$label-as.numeric(as.character(PredictForest)))^2))/nrow(test))

#### ENSEMBLE MODEL
factorToNum = function(factor){as.numeric(as.character(factor))}
predictEnsemble = ifelse(((factorToNum(PredictForest)*4 + factorToNum(PredictSVM)*2 + fitted.results +
                           factorToNum(PredictCTree))*2 + factorToNum(PredictCART)*2 / 11) >= .5 , 1,0)
predictEnsemble = ifelse(((factorToNum(PredictForest) + factorToNum(PredictSVM) + factorToNum(PredictCTree))  / 3) >= .5 , 1,0)

cm = table(test$label, predictEnsemble)
accuracy = (cm[1,1]+cm[2,2])/(cm[1,1]+cm[2,2]+cm[2,1]+cm[1,2])
accuracy #       [1] 0.9954726

############ NeuralNetwork
# library(neuralnet)
# 
# AuthorNN = neuralnet(label ~ dist_author + dist_title + dist_year + dist_coauthor +
#                        dist_keyword + dist_keyword + dist_journal,
#                      data=train, hidden=2, threshold=0.05)
# 
# ############ Naive Bayes


###################### MODELS   ##############
#######################################################
dbDisconnect(ucscDb)
rm(list=setdiff(ls(), "signature"))
